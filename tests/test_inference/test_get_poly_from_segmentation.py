import unittest
import numpy as np

import sys
sys.path.append("../../src")
from pyoseg.inference import get_poly_from_segmentation, cv_to_poly


class GetPolyFromSegmentationTests(unittest.TestCase):
    def test_list_annotation_poly_list(self):
        ann = [[1, 2, 3, 4]]
        result = get_poly_from_segmentation(ann)
        self.assertEqual(result, [1, 2, 3, 4])

    def test_dict_annotation_encoded(self):
        ann = {"counts": "T9Y2g<00O1000000000000O100000O1O1M32M10OiM[CU2i<O00000O10000000000O0100000000000O1000000000000000O010000000WOmMeDS2V;mMSD002f0Q2T;WNWDH?P2Z;^NfDb1Z;_NeDa1X;bNhD^1X;bNgD`1X;`NhDa1W;^NjDb1V;_NiDb1V;^NjDb1W;]NiDb1X;^NhDb1X;^NhDb1Y;\\NhDf1V;YNkDe1X;[NgDe1Y;[NgDe1Y;ZNgDg1Y;YNgDg1X;lMeDO2U2Z<1OO1N200N2O[ORNZDm1f;UNYDl1f;UNYDj1g;WNYDi1f;YNZDe1\\;RN]D99d1Y;TN]D9:c1c;]N^Db1];TNRD<a0`1];cNdD[1\\;fNeDY1Z;hNgDW1Z;fNiDY1Z;\\NnCNo0d1[<[NgBa1a=K1O000O10000000000O1000001O0O2O002mNVBl0l=QOUB0Ol0S>O3M1O1O0O1O2ON210O01O1O000O10O11O001O1O0O2O1O1O0O2O1O1O1O001N200N102Nb\\?OdT@0e>124N1]AJ\\>7bAJ^><7I1O1O10O00001O4L0eAGo=9lAGK3X>7iAF06V>5jANS>5mALU>1kA0T>0lA0T>0lA0U>OkA1U>=00L4KYOSBe0h=@XB`0f=\\O`Bd0n=00000001O010OO110O1O000_OUO_BY1g=iNXBP1l=0000000MnNWBS1i=mNXBR1h=33M1O00L42N1O001O001O0POSBm0P>01O009G0O2O00001O001O1N1N2M5MhWa1KWh^N<K0001O00000001O000K5H8J6000^OQB3o=MQB4n=LRB4n=LSBOP>2PBIU>7kAFX>:hAC[>=400M3N2M5Kn[21SdM1N2O2M2O1N2O1O1NBbA>\\>DdA<[>EeA;Y>GgA9X>HhA8V>;O0O10000N20O3M1N2O2N10001O0O010000000000cB_O[<a0\\C^O]O0M4Y=>\\C@]O4NJX=a0\\CD\\O5W=8[CC^O5X=8XCD@3[=7UC1k<1lB_OI10`0Z=4hB\\ON00`0Z=P122M2O0000001O00001ZC]N@NW<d1YDeNg;\\1WDiNd;Y1mCVN<a0e;[1oCTN<a0d;_1QDPN30Na0n;_1QDlNm;V1RDkNm;U1SDkNm;U1SDkNm;T201O0000001O000000001O01O1O010O0000000O12N00000000001O00000000010O0001O000001O000O100001OO2O000001O0010O0O110OO100001O00000000000002O2M3M1QMPDl2T<N0002ON10000001O0001O00001OO20OO10000O11O01O0000000000001O01OO10001O00000000010O00000000001O000000001O000000000000001O0001O0000000010N1O1UDnLi;X3L4L000O11OO1001O2NK51O2N2N3fLZDT3j;nLUDO4g2S<O10N011N1000O100011MO3O0YMiCf2Y<O2L3O00001`MaC]2_<cMaC]2a<O11O01O000000O100001O^E", "size": [480, 640]}
        result = get_poly_from_segmentation(ann)
        expected_result = [15, 287, 15, 289, 12, 292, 0, 292, 0, 364, 1, 364, 2, 363, 8, 363, 9, 362, 15, 362, 16, 361, 21, 361, 22, 360, 27, 360, 28, 359, 34, 359, 35, 358, 43, 358, 44, 357, 50, 357, 51, 356, 54, 356, 56, 358, 57, 358, 58, 359, 59, 359, 60, 358, 62, 358, 63, 359, 63, 360, 63, 359, 64, 358, 69, 358, 70, 359, 71, 358, 71, 357, 72, 356, 73, 356, 73, 355, 76, 352, 77, 353, 78, 352, 79, 352, 80, 351, 84, 351, 85, 350, 93, 350, 94, 349, 99, 349, 100, 348, 104, 348, 105, 347, 108, 347, 109, 346, 113, 346, 115, 344, 117, 344, 118, 345, 122, 345, 123, 344, 129, 344, 130, 343, 133, 343, 134, 342, 139, 342, 140, 341, 141, 342, 142, 341, 144, 341, 144, 340, 143, 339, 143, 338, 142, 338, 139, 335, 138, 335, 134, 331, 133, 331, 130, 328, 129, 328, 127, 326, 126, 326, 125, 325, 124, 326, 121, 326, 119, 324, 118, 324, 117, 323, 117, 324, 116, 325, 115, 324, 113, 324, 110, 321, 110, 319, 108, 317, 109, 316, 108, 316, 107, 315, 109, 313, 108, 312, 108, 311, 107, 310, 107, 309, 106, 309, 105, 308, 104, 308, 103, 307, 92, 307, 90, 305, 90, 301, 89, 300, 89, 299, 90, 298, 88, 296, 88, 295, 84, 291, 83, 291, 82, 290, 81, 290, 79, 288, 67, 288, 66, 289, 55, 289, 54, 290, 44, 290, 43, 291, 29, 291, 28, 292, 19, 292, 17, 290, 18, 289, 18, 288, 17, 289, 16, 289, 15, 288]
        np.testing.assert_array_equal(result, expected_result)

    def test_other_annotation_returns_none(self):
        ann = "not a list or dictionary"
        result = get_poly_from_segmentation(ann)
        self.assertIsNone(result)

if __name__ == '__main__':
    unittest.main()